{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nlet hostUrl = 'ThesisManagementSystem/';\nexport class ThesisManagementSystemService {\n  constructor(http) {\n    this.http = http;\n  }\n  getUniversityList() {\n    return this.http.get(hostUrl + 'GetUniversityList');\n  }\n  getUniversityData(id) {\n    return this.http.get(hostUrl + 'GetUniversity/' + id);\n  }\n  saveUniversity(university) {\n    return this.http.post(hostUrl + 'AddUniversity', university);\n  }\n  updateUniversity(university) {\n    return this.http.put(hostUrl + 'UpdateUniversity', university);\n  }\n  deleteUniversity(id) {\n    return this.http.delete(hostUrl + 'DeleteUniversity/' + id);\n  }\n  getInstituteList() {\n    return this.http.get(hostUrl + 'GetInstituteList');\n  }\n  getInstituteListForUniversity(universityId) {\n    return this.http.get(hostUrl + 'GetInstituteListForUniversity/' + universityId);\n  }\n  getInstituteData(id) {\n    return this.http.get(hostUrl + 'GetInstitute/' + id);\n  }\n  saveInstitute(comment) {\n    return this.http.post(hostUrl + 'AddInstitute', comment);\n  }\n  updateInstitute(comment) {\n    return this.http.put(hostUrl + 'UpdateInstitute', comment);\n  }\n  deleteInstitute(id) {\n    return this.http.delete(hostUrl + 'DeleteInstitute/' + id);\n  }\n  getPersonList() {\n    return this.http.get(hostUrl + 'GetPersonList');\n  }\n  getPersonData(id) {\n    return this.http.get(hostUrl + 'GetPerson/' + id);\n  }\n  savePerson(person) {\n    return this.http.post(hostUrl + 'AddPerson', person);\n  }\n  updatePerson(person) {\n    return this.http.put(hostUrl + 'UpdatePerson', person);\n  }\n  deletePerson(id) {\n    return this.http.delete(hostUrl + 'DeletePerson/' + id);\n  }\n  getThesisList() {\n    return this.http.get(hostUrl + 'GetThesisList');\n  }\n  getThesisData(id) {\n    return this.http.get(hostUrl + 'GetThesis/' + id);\n  }\n  getThesisListWithKeyword(keyword) {\n    return this.http.get(hostUrl + 'GetThesisListWithKeyword/' + keyword);\n  }\n  saveThesis(thesis) {\n    return this.http.post(hostUrl + 'AddThesis', thesis);\n  }\n  updateThesis(thesis) {\n    return this.http.put(hostUrl + 'UpdateThesis', thesis);\n  }\n  deleteThesis(id) {\n    return this.http.delete(hostUrl + 'DeleteThesis/' + id);\n  }\n  getThesisKeywordList() {\n    return this.http.get(hostUrl + 'GetThesisKeywordList');\n  }\n  getThesisKeywordListForThesis(thesisId) {\n    return this.http.get(hostUrl + 'GetThesisKeywordListForThesis/' + thesisId);\n  }\n  getThesisKeywordData(id) {\n    return this.http.get(hostUrl + 'GetThesisKeyword/' + id);\n  }\n  saveThesisKeyword(thesisKeyword) {\n    return this.http.post(hostUrl + 'AddThesisKeyword', thesisKeyword);\n  }\n  updateThesisKeyword(thesisKeyword) {\n    return this.http.put(hostUrl + 'UpdateThesisKeyword', thesisKeyword);\n  }\n  deleteThesisKeyword(id) {\n    return this.http.delete(hostUrl + 'DeleteThesisKeyword/' + id);\n  }\n  getThesisSubjectList() {\n    return this.http.get(hostUrl + 'GetThesisSubjectList');\n  }\n  getThesisSubjectListForThesis(thesisId) {\n    return this.http.get(hostUrl + 'GetThesisSubjectListForThesis/' + thesisId);\n  }\n  getThesisSubjectData(id) {\n    return this.http.get(hostUrl + 'GetThesisSubject/' + id);\n  }\n  saveThesisSubject(thesisSubject) {\n    return this.http.post(hostUrl + 'AddThesisSubject', thesisSubject);\n  }\n  updateThesisSubject(thesisSubject) {\n    return this.http.put(hostUrl + 'UpdateThesisSubject', thesisSubject);\n  }\n  deleteThesisSubject(id) {\n    return this.http.delete(hostUrl + 'DeleteThesisSubject/' + id);\n  }\n}\nThesisManagementSystemService.ɵfac = function ThesisManagementSystemService_Factory(t) {\n  return new (t || ThesisManagementSystemService)(i0.ɵɵinject(i1.HttpClient));\n};\nThesisManagementSystemService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ThesisManagementSystemService,\n  factory: ThesisManagementSystemService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["hostUrl","ThesisManagementSystemService","constructor","http","getUniversityList","get","getUniversityData","id","saveUniversity","university","post","updateUniversity","put","deleteUniversity","delete","getInstituteList","getInstituteListForUniversity","universityId","getInstituteData","saveInstitute","comment","updateInstitute","deleteInstitute","getPersonList","getPersonData","savePerson","person","updatePerson","deletePerson","getThesisList","getThesisData","getThesisListWithKeyword","keyword","saveThesis","thesis","updateThesis","deleteThesis","getThesisKeywordList","getThesisKeywordListForThesis","thesisId","getThesisKeywordData","saveThesisKeyword","thesisKeyword","updateThesisKeyword","deleteThesisKeyword","getThesisSubjectList","getThesisSubjectListForThesis","getThesisSubjectData","saveThesisSubject","thesisSubject","updateThesisSubject","deleteThesisSubject","factory","providedIn"],"sourceRoot":"","sources":["/Users/nisadiker/Projects/ThesisManagementSystem/ThesisManagementSystem/ClientApp/src/app/services/thesisManagementSystem.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { University } from '../models/university';\nimport { Institute } from '../models/institute';\nimport { Person } from '../models/person';\nimport { Thesis } from '../models/thesis';\nimport { Observable } from 'rxjs';\nimport { HttpHeaders } from '@angular/common/http';\nimport { ThesisKeyword } from '../models/thesisKeyword';\nimport { ThesisSubject } from '../models/thesisSubject';\n\n\nlet hostUrl = 'ThesisManagementSystem/';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ThesisManagementSystemService {\n\n  constructor(private http: HttpClient) { }\n\n  getUniversityList(): Observable<University[]> {\n    return this.http.get<University[]>(hostUrl + 'GetUniversityList');\n  }\n\n  getUniversityData(id: number): Observable<University> {\n    return this.http.get<University>(hostUrl + 'GetUniversity/' + id);\n  }\n\n  saveUniversity(university: University): Observable<any> {\n    return this.http.post(hostUrl + 'AddUniversity', university);\n  }\n\n  updateUniversity(university: University): Observable<any> {\n    return this.http.put(hostUrl + 'UpdateUniversity', university);\n  }\n\n  deleteUniversity(id: number): Observable<any> {\n    return this.http.delete(hostUrl + 'DeleteUniversity/' + id);\n  }\n\n  getInstituteList(): Observable<Institute[]> {\n    return this.http.get<Institute[]>(hostUrl + 'GetInstituteList');\n  }\n\n  getInstituteListForUniversity(universityId: number): Observable<Institute[]> {\n    return this.http.get<Institute[]>(hostUrl + 'GetInstituteListForUniversity/' + universityId);\n  }\n\n  getInstituteData(id: number): Observable<Institute> {\n    return this.http.get<Institute>(hostUrl + 'GetInstitute/' + id);\n  }\n\n  saveInstitute(comment: Institute): Observable<any> {\n    return this.http.post(hostUrl + 'AddInstitute', comment);\n  }\n\n  updateInstitute(comment: Institute): Observable<any> {\n    return this.http.put(hostUrl + 'UpdateInstitute', comment);\n  }\n\n  deleteInstitute(id: number): Observable<any> {\n    return this.http.delete(hostUrl + 'DeleteInstitute/' + id);\n  }\n\n  getPersonList(): Observable<Person[]> {\n    return this.http.get<Person[]>(hostUrl + 'GetPersonList');\n  }\n\n  getPersonData(id: number): Observable<Person> {\n    return this.http.get<Person>(hostUrl + 'GetPerson/' + id);\n  }\n\n  savePerson(person: Person): Observable<any> {\n    return this.http.post(hostUrl + 'AddPerson', person);\n  }\n\n  updatePerson(person: Person): Observable<any> {\n    return this.http.put(hostUrl + 'UpdatePerson', person);\n  }\n\n  deletePerson(id: number): Observable<any> {\n    return this.http.delete(hostUrl + 'DeletePerson/' + id);\n  }\n\n  getThesisList(): Observable<Thesis[]> {\n    return this.http.get<Thesis[]>(hostUrl + 'GetThesisList');\n  }\n\n  getThesisData(id: number): Observable<Thesis> {\n    return this.http.get<Thesis>(hostUrl + 'GetThesis/' + id);\n  }\n\n  getThesisListWithKeyword(keyword: string): Observable<Thesis> {\n    return this.http.get<Thesis[]>(hostUrl + 'GetThesisListWithKeyword/' + keyword);\n  }\n\n  saveThesis(thesis: Thesis): Observable<any> {\n    return this.http.post(hostUrl + 'AddThesis', thesis);\n  }\n\n  updateThesis(thesis: Thesis): Observable<any> {\n    return this.http.put(hostUrl + 'UpdateThesis', thesis);\n  }\n\n  deleteThesis(id: number): Observable<any> {\n    return this.http.delete(hostUrl + 'DeleteThesis/' + id);\n  }\n\n  getThesisKeywordList(): Observable<ThesisKeyword[]> {\n    return this.http.get<ThesisKeyword[]>(hostUrl + 'GetThesisKeywordList');\n  }\n\n  getThesisKeywordListForThesis(thesisId: number): Observable<ThesisKeyword[]> {\n    return this.http.get<ThesisKeyword[]>(hostUrl + 'GetThesisKeywordListForThesis/' + thesisId);\n  }\n\n  getThesisKeywordData(id: number): Observable<ThesisKeyword> {\n    return this.http.get<ThesisKeyword>(hostUrl + 'GetThesisKeyword/' + id);\n  }\n\n  saveThesisKeyword(thesisKeyword: ThesisKeyword): Observable<any> {\n    return this.http.post(hostUrl + 'AddThesisKeyword', thesisKeyword);\n  }\n\n  updateThesisKeyword(thesisKeyword: ThesisKeyword): Observable<any> {\n    return this.http.put(hostUrl + 'UpdateThesisKeyword', thesisKeyword);\n  }\n\n  deleteThesisKeyword(id: number): Observable<any> {\n    return this.http.delete(hostUrl + 'DeleteThesisKeyword/' + id);\n  }\n\n  getThesisSubjectList(): Observable<ThesisSubject[]> {\n    return this.http.get<ThesisSubject[]>(hostUrl + 'GetThesisSubjectList');\n  }\n\n  getThesisSubjectListForThesis(thesisId: number): Observable<ThesisSubject[]> {\n    return this.http.get<ThesisSubject[]>(hostUrl + 'GetThesisSubjectListForThesis/' + thesisId);\n  }\n\n  getThesisSubjectData(id: number): Observable<ThesisSubject> {\n    return this.http.get<ThesisSubject>(hostUrl + 'GetThesisSubject/' + id);\n  }\n\n  saveThesisSubject(thesisSubject: ThesisSubject): Observable<any> {\n    return this.http.post(hostUrl + 'AddThesisSubject', thesisSubject);\n  }\n\n  updateThesisSubject(thesisSubject: ThesisSubject): Observable<any> {\n    return this.http.put(hostUrl + 'UpdateThesisSubject', thesisSubject);\n  }\n\n  deleteThesisSubject(id: number): Observable<any> {\n    return this.http.delete(hostUrl + 'DeleteThesisSubject/' + id);\n  }\n\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}