{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/thesisManagementSystem.service\";\nfunction AddPersonComponent_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 9);\n    i0.ɵɵtext(1, \" Person Name is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class AddPersonComponent {\n  constructor(fb, avRoute, thesisManagementSystemService, router) {\n    this.fb = fb;\n    this.avRoute = avRoute;\n    this.thesisManagementSystemService = thesisManagementSystemService;\n    this.router = router;\n    this.title = 'Create';\n    this.personId = 0;\n    this.submitted = false;\n    this.personForm = this.fb.group({\n      personId: 0,\n      personName: ['', [Validators.required]]\n    });\n  }\n  ngOnInit() {\n    this.avRoute.paramMap.subscribe(params => {\n      this.personId = params.get('id');\n    });\n    if (this.personId > 0) {\n      this.title = 'Edit';\n      this.thesisManagementSystemService.getPersonData(this.personId).subscribe(response => {\n        this.personForm.setValue({\n          personId: response.personId,\n          personName: response.personName\n        });\n      }, error => console.error(error));\n    }\n  }\n  get registerFormControl() {\n    return this.personForm.controls;\n  }\n  save() {\n    this.submitted = true;\n    if (!this.personForm.valid) {\n      return;\n    }\n    if (this.personId > 0) {\n      this.updatePerson();\n    } else {\n      this.addPerson();\n    }\n  }\n  cancel() {\n    this.navigateToFetchPerson();\n  }\n  addPerson() {\n    this.thesisManagementSystemService.savePerson(this.personForm.value).subscribe(() => {\n      this.navigateToFetchPerson();\n    }, error => console.error(error));\n  }\n  updatePerson() {\n    this.thesisManagementSystemService.updatePerson(this.personForm.value).subscribe(() => {\n      this.navigateToFetchPerson();\n    }, error => console.error(error));\n  }\n  navigateToFetchPerson() {\n    this.router.navigate(['/fetch-person']);\n  }\n}\nAddPersonComponent.ɵfac = function AddPersonComponent_Factory(t) {\n  return new (t || AddPersonComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.ThesisManagementSystemService), i0.ɵɵdirectiveInject(i2.Router));\n};\nAddPersonComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AddPersonComponent,\n  selectors: [[\"app-add-person\"]],\n  decls: 19,\n  vars: 3,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\", \"row\"], [1, \"control-label\", \"col-md-12\"], [1, \"col-md-4\"], [\"formControlName\", \"personName\", 2, \"width\", \"415px\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [1, \"form-group\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [1, \"btn\", \"btn-danger\", 3, \"click\"], [1, \"text-danger\"]],\n  template: function AddPersonComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"h3\");\n      i0.ɵɵtext(3, \"Person\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"hr\");\n      i0.ɵɵelementStart(5, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function AddPersonComponent_Template_form_ngSubmit_5_listener() {\n        return ctx.save();\n      });\n      i0.ɵɵelementStart(6, \"div\", 1)(7, \"label\", 2);\n      i0.ɵɵtext(8, \"Person Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"div\", 3);\n      i0.ɵɵelement(10, \"input\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(11, AddPersonComponent_span_11_Template, 2, 0, \"span\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"br\");\n      i0.ɵɵelementStart(13, \"div\", 6)(14, \"button\", 7);\n      i0.ɵɵtext(15, \"Save\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(16, \" \\u00A0 \");\n      i0.ɵɵelementStart(17, \"button\", 8);\n      i0.ɵɵlistener(\"click\", function AddPersonComponent_Template_button_click_17_listener() {\n        return ctx.cancel();\n      });\n      i0.ɵɵtext(18, \"Cancel\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(ctx.title);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formGroup\", ctx.personForm);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", (ctx.registerFormControl.personName.touched || ctx.submitted) && (ctx.registerFormControl.personName.errors == null ? null : ctx.registerFormControl.personName.errors.required));\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","AddPersonComponent","constructor","fb","avRoute","thesisManagementSystemService","router","personForm","group","personId","personName","required","ngOnInit","paramMap","subscribe","params","get","title","getPersonData","response","setValue","error","console","registerFormControl","controls","save","submitted","valid","updatePerson","addPerson","cancel","navigateToFetchPerson","savePerson","value","navigate","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/nisadiker/Projects/ThesisManagementSystem/ThesisManagementSystem/ClientApp/src/app/add-person/add-person.component.ts","/Users/nisadiker/Projects/ThesisManagementSystem/ThesisManagementSystem/ClientApp/src/app/add-person/add-person.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { Person } from '../models/person';\nimport { ThesisManagementSystemService } from '../services/thesisManagementSystem.service';\n\n\n@Component({\n  selector: 'app-add-person',\n  templateUrl: './add-person.component.html',\n  styleUrls: ['./add-person.component.scss'],\n})\nexport class AddPersonComponent implements OnInit {\n  personForm: FormGroup;\n  title = 'Create';\n  personId: number = 0;\n  errorMessage: any;\n  submitted = false;\n\n\n  constructor(\n    private fb: FormBuilder,\n    private avRoute: ActivatedRoute,\n    private thesisManagementSystemService: ThesisManagementSystemService,\n    private router: Router\n  ) {\n\n    this.personForm = this.fb.group({\n      personId: 0,\n      personName: ['', [Validators.required]],\n      \n    });\n  }\n\n  ngOnInit(): void {\n    this.avRoute.paramMap.subscribe((params: Params) => {\n      this.personId = params.get('id');\n    });\n\n    if (this.personId > 0) {\n      this.title = 'Edit';\n\n      this.thesisManagementSystemService.getPersonData(this.personId).subscribe(\n        (response: Person) => {\n          this.personForm.setValue(\n            {\n              personId: response.personId,\n              personName: response.personName\n            });\n        },\n        (error) => console.error(error)\n      );\n      \n    }\n  }\n\n  get registerFormControl() {\n    return this.personForm.controls;\n  }\n\n  save(): void {\n    this.submitted = true;\n    if (!this.personForm.valid) {\n      return;\n    }\n\n    if (this.personId > 0) {\n      this.updatePerson();\n    } else {\n      this.addPerson();\n    }\n  }\n\n  cancel(): void {\n    this.navigateToFetchPerson();\n  }\n\n  private addPerson(): void {\n    \n    this.thesisManagementSystemService.savePerson(this.personForm.value).subscribe(\n      () => {\n        this.navigateToFetchPerson();\n      },\n      (error) => console.error(error)\n    );\n    \n  }\n\n  private updatePerson(): void {\n    this.thesisManagementSystemService.updatePerson(this.personForm.value).subscribe(\n      () => {\n        this.navigateToFetchPerson();\n      },\n      (error) => console.error(error)\n    );\n  }\n\n  private navigateToFetchPerson() {\n    this.router.navigate(['/fetch-person']);\n  }\n}\n","<h1>{{ title }}</h1>\n<h3>Person</h3>\n<hr />\n\n<form [formGroup]=\"personForm\" (ngSubmit)=\"save()\">\n    \n\n    <div class=\"form-group row\">\n        <label class=\"control-label col-md-12\">Person Name</label>\n        <div class=\"col-md-4\">\n            <input formControlName=\"personName\" style=\"width:415px\"/>\n        </div>\n        <span class=\"text-danger\" *ngIf=\"\n        (registerFormControl.personName.touched || submitted) &&\n        registerFormControl.personName.errors?.required\n      \">\n            Person Name is required.\n        </span>\n    </div>\n\n\n    <br />\n    <div class=\"form-group\">\n        <button type=\"submit\" class=\"btn btn-primary\">Save</button>\n        &nbsp;\n        <button class=\"btn btn-danger\" (click)=\"cancel()\">Cancel</button>\n    </div>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}