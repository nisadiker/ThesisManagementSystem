{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet AddInstituteComponent = class AddInstituteComponent {\n  constructor(fb, avRoute, thesisManagementSystemService, router) {\n    this.fb = fb;\n    this.avRoute = avRoute;\n    this.thesisManagementSystemService = thesisManagementSystemService;\n    this.router = router;\n    this.title = 'Create';\n    this.instituteId = 0;\n    this.submitted = false;\n    this.instituteForm = this.fb.group({\n      instituteId: 0,\n      instituteName: ['', [Validators.required]]\n    });\n  }\n  ngOnInit() {\n    this.avRoute.paramMap.subscribe(params => {\n      this.instituteId = params.get('id');\n    });\n    if (this.instituteId > 0) {\n      this.title = 'Edit';\n      this.thesisManagementSystemService.getInstituteData(this.instituteId).subscribe(response => {\n        this.instituteForm.setValue({\n          instituteId: response.instituteId,\n          instituteName: response.instituteName,\n          universityId: response.universityId\n        });\n      }, error => console.error(error));\n    }\n  }\n  get registerFormControl() {\n    return this.instituteForm.controls;\n  }\n  save() {\n    this.submitted = true;\n    if (!this.instituteForm.valid) {\n      return;\n    }\n    if (this.instituteId > 0) {\n      this.updateInstitute();\n    } else {\n      this.addInstitute();\n    }\n  }\n  cancel() {\n    this.navigateToFetchInstitute();\n  }\n  addInstitute() {\n    this.thesisManagementSystemService.saveInstitute(this.instituteForm.value).subscribe(() => {\n      this.navigateToFetchInstitute();\n    }, error => console.error(error));\n  }\n  updateInstitute() {\n    this.thesisManagementSystemService.updateInstitute(this.instituteForm.value).subscribe(() => {\n      this.navigateToFetchInstitute();\n    }, error => console.error(error));\n  }\n  navigateToFetchInstitute() {\n    this.router.navigate(['/fetch-institute']);\n  }\n};\nAddInstituteComponent = __decorate([Component({\n  selector: 'app-add-institute',\n  templateUrl: './add-institute.component.html',\n  styleUrls: ['./add-institute.component.scss']\n})], AddInstituteComponent);\nexport { AddInstituteComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAsBC,UAAU,QAAmB,gBAAgB;AAa5D,IAAMC,qBAAqB,GAA3B,MAAMA,qBAAqB;EAQhCC,YACUC,EAAe,EACfC,OAAuB,EACvBC,6BAA4D,EAC5DC,MAAc;IAHd,OAAE,GAAFH,EAAE;IACF,YAAO,GAAPC,OAAO;IACP,kCAA6B,GAA7BC,6BAA6B;IAC7B,WAAM,GAANC,MAAM;IAVhB,UAAK,GAAG,QAAQ;IAChB,gBAAW,GAAW,CAAC;IAEvB,cAAS,GAAG,KAAK;IAUf,IAAI,CAACC,aAAa,GAAG,IAAI,CAACJ,EAAE,CAACK,KAAK,CAAC;MACjCC,WAAW,EAAE,CAAC;MACdC,aAAa,EAAE,CAAC,EAAE,EAAE,CAACV,UAAU,CAACW,QAAQ,CAAC;KAE1C,CAAC;EACJ;EAEAC,QAAQ;IACN,IAAI,CAACR,OAAO,CAACS,QAAQ,CAACC,SAAS,CAAEC,MAAc,IAAI;MACjD,IAAI,CAACN,WAAW,GAAGM,MAAM,CAACC,GAAG,CAAC,IAAI,CAAC;IACrC,CAAC,CAAC;IAEF,IAAI,IAAI,CAACP,WAAW,GAAG,CAAC,EAAE;MACxB,IAAI,CAACQ,KAAK,GAAG,MAAM;MAEnB,IAAI,CAACZ,6BAA6B,CAACa,gBAAgB,CAAC,IAAI,CAACT,WAAW,CAAC,CAACK,SAAS,CAC5EK,QAAmB,IAAI;QACtB,IAAI,CAACZ,aAAa,CAACa,QAAQ,CACzB;UACEX,WAAW,EAAEU,QAAQ,CAACV,WAAW;UACjCC,aAAa,EAAES,QAAQ,CAACT,aAAa;UACrCW,YAAY,EAAEF,QAAQ,CAACE;SACxB,CAAC;MACN,CAAC,EACAC,KAAK,IAAKC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAChC;;EAGL;EAEA,IAAIE,mBAAmB;IACrB,OAAO,IAAI,CAACjB,aAAa,CAACkB,QAAQ;EACpC;EAEAC,IAAI;IACF,IAAI,CAACC,SAAS,GAAG,IAAI;IACrB,IAAI,CAAC,IAAI,CAACpB,aAAa,CAACqB,KAAK,EAAE;MAC7B;;IAGF,IAAI,IAAI,CAACnB,WAAW,GAAG,CAAC,EAAE;MACxB,IAAI,CAACoB,eAAe,EAAE;KACvB,MAAM;MACL,IAAI,CAACC,YAAY,EAAE;;EAEvB;EAEAC,MAAM;IACJ,IAAI,CAACC,wBAAwB,EAAE;EACjC;EAEQF,YAAY;IAElB,IAAI,CAACzB,6BAA6B,CAAC4B,aAAa,CAAC,IAAI,CAAC1B,aAAa,CAAC2B,KAAK,CAAC,CAACpB,SAAS,CAClF,MAAK;MACH,IAAI,CAACkB,wBAAwB,EAAE;IACjC,CAAC,EACAV,KAAK,IAAKC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAChC;EAEH;EAEQO,eAAe;IACrB,IAAI,CAACxB,6BAA6B,CAACwB,eAAe,CAAC,IAAI,CAACtB,aAAa,CAAC2B,KAAK,CAAC,CAACpB,SAAS,CACpF,MAAK;MACH,IAAI,CAACkB,wBAAwB,EAAE;IACjC,CAAC,EACAV,KAAK,IAAKC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAChC;EACH;EAEQU,wBAAwB;IAC9B,IAAI,CAAC1B,MAAM,CAAC6B,QAAQ,CAAC,CAAC,kBAAkB,CAAC,CAAC;EAC5C;CACD;AAzFYlC,qBAAqB,eALjCF,SAAS,CAAC;EACTqC,QAAQ,EAAE,mBAAmB;EAC7BC,WAAW,EAAE,gCAAgC;EAC7CC,SAAS,EAAE,CAAC,gCAAgC;CAC7C,CAAC,GACWrC,qBAAqB,CAyFjC;SAzFYA,qBAAqB","names":["Component","Validators","AddInstituteComponent","constructor","fb","avRoute","thesisManagementSystemService","router","instituteForm","group","instituteId","instituteName","required","ngOnInit","paramMap","subscribe","params","get","title","getInstituteData","response","setValue","universityId","error","console","registerFormControl","controls","save","submitted","valid","updateInstitute","addInstitute","cancel","navigateToFetchInstitute","saveInstitute","value","navigate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/nisadiker/Projects/ThesisManagementSystem/ThesisManagementSystem/ClientApp/src/app/add-institute/add-institute.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { Institute } from '../models/institute';\nimport { ThesisManagementSystemService } from '../services/thesisManagementSystem.service';\n\n\n@Component({\n  selector: 'app-add-institute',\n  templateUrl: './add-institute.component.html',\n  styleUrls: ['./add-institute.component.scss'],\n})\nexport class AddInstituteComponent implements OnInit {\n  instituteForm: FormGroup;\n  title = 'Create';\n  instituteId: number = 0;\n  errorMessage: any;\n  submitted = false;\n\n\n  constructor(\n    private fb: FormBuilder,\n    private avRoute: ActivatedRoute,\n    private thesisManagementSystemService: ThesisManagementSystemService,\n    private router: Router\n  ) {\n\n    this.instituteForm = this.fb.group({\n      instituteId: 0,\n      instituteName: ['', [Validators.required]],\n      \n    });\n  }\n\n  ngOnInit(): void {\n    this.avRoute.paramMap.subscribe((params: Params) => {\n      this.instituteId = params.get('id');\n    });\n\n    if (this.instituteId > 0) {\n      this.title = 'Edit';\n\n      this.thesisManagementSystemService.getInstituteData(this.instituteId).subscribe(\n        (response: Institute) => {\n          this.instituteForm.setValue(\n            {\n              instituteId: response.instituteId,\n              instituteName: response.instituteName,\n              universityId: response.universityId\n            });\n        },\n        (error) => console.error(error)\n      );\n      \n    }\n  }\n\n  get registerFormControl() {\n    return this.instituteForm.controls;\n  }\n\n  save(): void {\n    this.submitted = true;\n    if (!this.instituteForm.valid) {\n      return;\n    }\n\n    if (this.instituteId > 0) {\n      this.updateInstitute();\n    } else {\n      this.addInstitute();\n    }\n  }\n\n  cancel(): void {\n    this.navigateToFetchInstitute();\n  }\n\n  private addInstitute(): void {\n    \n    this.thesisManagementSystemService.saveInstitute(this.instituteForm.value).subscribe(\n      () => {\n        this.navigateToFetchInstitute();\n      },\n      (error) => console.error(error)\n    );\n    \n  }\n\n  private updateInstitute(): void {\n    this.thesisManagementSystemService.updateInstitute(this.instituteForm.value).subscribe(\n      () => {\n        this.navigateToFetchInstitute();\n      },\n      (error) => console.error(error)\n    );\n  }\n\n  private navigateToFetchInstitute() {\n    this.router.navigate(['/fetch-institute']);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}