{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet AddThesisComponent = class AddThesisComponent {\n  constructor(fb, avRoute, thesisManagementSystemService, router, datepipe) {\n    this.fb = fb;\n    this.avRoute = avRoute;\n    this.thesisManagementSystemService = thesisManagementSystemService;\n    this.router = router;\n    this.datepipe = datepipe;\n    this.universities = [];\n    this.institutes = [];\n    this.title = 'Create';\n    this.thesisId = 0;\n    this.submitted = false;\n    this.thesisForm = this.fb.group({\n      thesisId: 0,\n      title: ['', [Validators.required]],\n      universityId: ['', [Validators.required]],\n      instituteId: ['', [Validators.required]],\n      abstract: ['', [Validators.required]],\n      submissionDate: ['', [Validators.required]]\n    });\n  }\n  ngOnInit() {\n    this.getUniversities();\n    this.avRoute.paramMap.subscribe(params => {\n      this.thesisId = params.get('id');\n    });\n    if (this.thesisId > 0) {\n      this.title = 'Edit';\n      this.thesisManagementSystemService.getThesisData(this.thesisId).subscribe(response => {\n        this.getInstitutes(response.universityId);\n        this.thesisForm.setValue({\n          thesisId: response.thesisId,\n          title: response.title,\n          universityId: response.universityId,\n          instituteId: response.instituteId,\n          abstract: response.abstract,\n          submissionDate: this.datepipe.transform(response.submissionDate, 'dd-MM-yyyy')\n        });\n      }, error => console.error(error));\n    }\n  }\n  onUniversitySelectChange(event) {\n    // You can access the selected value using event.target.value\n    const selectedValue = event.target.value;\n    // Call your method or perform actions based on the selected value\n    this.getInstitutes(selectedValue);\n  }\n  getUniversities() {\n    this.thesisManagementSystemService.getUniversityList().subscribe(universityData => this.universities = universityData);\n  }\n  getInstitutes(universityId) {\n    this.thesisManagementSystemService.getInstituteListForUniversity(universityId).subscribe(instituteData => this.institutes = instituteData);\n  }\n  get registerFormControl() {\n    return this.thesisForm.controls;\n  }\n  save() {\n    this.submitted = true;\n    if (!this.thesisForm.valid) {\n      return;\n    }\n    if (this.thesisId > 0) {\n      this.updateThesis();\n    } else {\n      this.addThesis();\n    }\n  }\n  cancel() {\n    this.navigateToFetchThesis();\n  }\n  addThesis() {\n    this.thesisManagementSystemService.saveThesis(this.thesisForm.value).subscribe(() => {\n      this.navigateToFetchThesis();\n    }, error => console.error(error));\n  }\n  updateThesis() {\n    this.thesisManagementSystemService.updateThesis(this.thesisForm.value).subscribe(() => {\n      this.navigateToFetchThesis();\n    }, error => console.error(error));\n  }\n  navigateToFetchThesis() {\n    this.router.navigate(['/fetch-thesis']);\n  }\n};\nAddThesisComponent = __decorate([Component({\n  selector: 'app-add-thesis',\n  templateUrl: './add-thesis.component.html',\n  styleUrls: ['./add-thesis.component.scss']\n})], AddThesisComponent);\nexport { AddThesisComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAsBC,UAAU,QAAmB,gBAAgB;AAe5D,IAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAW7BC,YACUC,EAAe,EACfC,OAAuB,EACvBC,6BAA4D,EAC5DC,MAAc,EACdC,QAAkB;IAJlB,OAAE,GAAFJ,EAAE;IACF,YAAO,GAAPC,OAAO;IACP,kCAA6B,GAA7BC,6BAA6B;IAC7B,WAAM,GAANC,MAAM;IACN,aAAQ,GAARC,QAAQ;IAfX,iBAAY,GAAiB,EAAE;IAC/B,eAAU,GAAgB,EAAE;IAEnC,UAAK,GAAG,QAAQ;IAChB,aAAQ,GAAW,CAAC;IAEpB,cAAS,GAAG,KAAK;IAYf,IAAI,CAACC,UAAU,GAAG,IAAI,CAACL,EAAE,CAACM,KAAK,CAAC;MAC9BC,QAAQ,EAAE,CAAC;MACXC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACX,UAAU,CAACY,QAAQ,CAAC,CAAC;MAClCC,YAAY,EAAE,CAAC,EAAE,EAAE,CAACb,UAAU,CAACY,QAAQ,CAAC,CAAC;MACzCE,WAAW,EAAE,CAAC,EAAE,EAAE,CAACd,UAAU,CAACY,QAAQ,CAAC,CAAC;MACxCG,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACf,UAAU,CAACY,QAAQ,CAAC,CAAC;MACrCI,cAAc,EAAE,CAAC,EAAE,EAAE,CAAChB,UAAU,CAACY,QAAQ,CAAC;KAC3C,CAAC;EACJ;EAIAK,QAAQ;IACN,IAAI,CAACC,eAAe,EAAE;IAEtB,IAAI,CAACd,OAAO,CAACe,QAAQ,CAACC,SAAS,CAAEC,MAAc,IAAI;MACjD,IAAI,CAACX,QAAQ,GAAGW,MAAM,CAACC,GAAG,CAAC,IAAI,CAAC;IAClC,CAAC,CAAC;IAEF,IAAI,IAAI,CAACZ,QAAQ,GAAG,CAAC,EAAE;MACrB,IAAI,CAACC,KAAK,GAAG,MAAM;MAEnB,IAAI,CAACN,6BAA6B,CAACkB,aAAa,CAAC,IAAI,CAACb,QAAQ,CAAC,CAACU,SAAS,CACtEI,QAAgB,IAAI;QACnB,IAAI,CAACC,aAAa,CAACD,QAAQ,CAACX,YAAY,CAAC;QACzC,IAAI,CAACL,UAAU,CAACkB,QAAQ,CACtB;UACEhB,QAAQ,EAAEc,QAAQ,CAACd,QAAQ;UAC3BC,KAAK,EAAEa,QAAQ,CAACb,KAAK;UACrBE,YAAY,EAAEW,QAAQ,CAACX,YAAY;UACnCC,WAAW,EAAEU,QAAQ,CAACV,WAAW;UACjCC,QAAQ,EAAES,QAAQ,CAACT,QAAQ;UAC3BC,cAAc,EAAE,IAAI,CAACT,QAAQ,CAACoB,SAAS,CAACH,QAAQ,CAACR,cAAc,EAAE,YAAY;SAC9E,CAAC;MACN,CAAC,EACAY,KAAK,IAAKC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAChC;;EAGL;EAEAE,wBAAwB,CAACC,KAAU;IACjC;IACA,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK;IAExC;IACA,IAAI,CAACT,aAAa,CAACO,aAAa,CAAC;EACnC;EAEAd,eAAe;IACb,IAAI,CAACb,6BAA6B,CAC/B8B,iBAAiB,EAAE,CACnBf,SAAS,CAAEgB,cAAc,IAAM,IAAI,CAACC,YAAY,GAAGD,cAAe,CAAC;EACxE;EAEAX,aAAa,CAACZ,YAAoB;IAChC,IAAI,CAACR,6BAA6B,CAC/BiC,6BAA6B,CAACzB,YAAY,CAAC,CAC3CO,SAAS,CAAEmB,aAAa,IAAM,IAAI,CAACC,UAAU,GAAGD,aAAc,CAAC;EACpE;EAEA,IAAIE,mBAAmB;IACrB,OAAO,IAAI,CAACjC,UAAU,CAACkC,QAAQ;EACjC;EAEAC,IAAI;IACF,IAAI,CAACC,SAAS,GAAG,IAAI;IACrB,IAAI,CAAC,IAAI,CAACpC,UAAU,CAACqC,KAAK,EAAE;MAC1B;;IAGF,IAAI,IAAI,CAACnC,QAAQ,GAAG,CAAC,EAAE;MACrB,IAAI,CAACoC,YAAY,EAAE;KACpB,MAAM;MACL,IAAI,CAACC,SAAS,EAAE;;EAEpB;EAEAC,MAAM;IACJ,IAAI,CAACC,qBAAqB,EAAE;EAC9B;EAEQF,SAAS;IAEf,IAAI,CAAC1C,6BAA6B,CAAC6C,UAAU,CAAC,IAAI,CAAC1C,UAAU,CAAC0B,KAAK,CAAC,CAACd,SAAS,CAC5E,MAAK;MACH,IAAI,CAAC6B,qBAAqB,EAAE;IAC9B,CAAC,EACArB,KAAK,IAAKC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAChC;EAEH;EAEQkB,YAAY;IAClB,IAAI,CAACzC,6BAA6B,CAACyC,YAAY,CAAC,IAAI,CAACtC,UAAU,CAAC0B,KAAK,CAAC,CAACd,SAAS,CAC9E,MAAK;MACH,IAAI,CAAC6B,qBAAqB,EAAE;IAC9B,CAAC,EACArB,KAAK,IAAKC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAChC;EACH;EAEQqB,qBAAqB;IAC3B,IAAI,CAAC3C,MAAM,CAAC6C,QAAQ,CAAC,CAAC,eAAe,CAAC,CAAC;EACzC;CACD;AA5HYlD,kBAAkB,eAL9BF,SAAS,CAAC;EACTqD,QAAQ,EAAE,gBAAgB;EAC1BC,WAAW,EAAE,6BAA6B;EAC1CC,SAAS,EAAE,CAAC,6BAA6B;CAC1C,CAAC,GACWrD,kBAAkB,CA4H9B;SA5HYA,kBAAkB","names":["Component","Validators","AddThesisComponent","constructor","fb","avRoute","thesisManagementSystemService","router","datepipe","thesisForm","group","thesisId","title","required","universityId","instituteId","abstract","submissionDate","ngOnInit","getUniversities","paramMap","subscribe","params","get","getThesisData","response","getInstitutes","setValue","transform","error","console","onUniversitySelectChange","event","selectedValue","target","value","getUniversityList","universityData","universities","getInstituteListForUniversity","instituteData","institutes","registerFormControl","controls","save","submitted","valid","updateThesis","addThesis","cancel","navigateToFetchThesis","saveThesis","navigate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/nisadiker/Projects/ThesisManagementSystem/ThesisManagementSystem/ClientApp/src/app/add-thesis/add-thesis.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { Institute } from '../models/institute';\nimport { Thesis } from '../models/thesis';\nimport { University } from '../models/university';\nimport { ThesisManagementSystemService } from '../services/thesisManagementSystem.service';\n\n\n@Component({\n  selector: 'app-add-thesis',\n  templateUrl: './add-thesis.component.html',\n  styleUrls: ['./add-thesis.component.scss'],\n})\nexport class AddThesisComponent implements OnInit {\n  public universities: University[] = [];\n  public institutes: Institute[] = [];\n  thesisForm: FormGroup;\n  title = 'Create';\n  thesisId: number = 0;\n  errorMessage: any;\n  submitted = false;\n\n\n\n  constructor(\n    private fb: FormBuilder,\n    private avRoute: ActivatedRoute,\n    private thesisManagementSystemService: ThesisManagementSystemService,\n    private router: Router,\n    private datepipe: DatePipe\n  ) {\n\n    this.thesisForm = this.fb.group({\n      thesisId: 0,\n      title: ['', [Validators.required]],\n      universityId: ['', [Validators.required]], \n      instituteId: ['', [Validators.required]], \n      abstract: ['', [Validators.required]],\n      submissionDate: ['', [Validators.required]],\n    });\n  }\n\n\n\n  ngOnInit(): void {\n    this.getUniversities();\n\n    this.avRoute.paramMap.subscribe((params: Params) => {\n      this.thesisId = params.get('id');\n    });\n\n    if (this.thesisId > 0) {\n      this.title = 'Edit';\n\n      this.thesisManagementSystemService.getThesisData(this.thesisId).subscribe(\n        (response: Thesis) => {\n          this.getInstitutes(response.universityId);\n          this.thesisForm.setValue(\n            {\n              thesisId: response.thesisId,\n              title: response.title,\n              universityId: response.universityId,\n              instituteId: response.instituteId,\n              abstract: response.abstract,\n              submissionDate: this.datepipe.transform(response.submissionDate, 'dd-MM-yyyy')\n            });\n        },\n        (error) => console.error(error)\n      );\n      \n    }\n  }\n\n  onUniversitySelectChange(event: any) {\n    // You can access the selected value using event.target.value\n    const selectedValue = event.target.value;\n\n    // Call your method or perform actions based on the selected value\n    this.getInstitutes(selectedValue);\n  }\n\n  getUniversities(): void {\n    this.thesisManagementSystemService\n      .getUniversityList()\n      .subscribe((universityData) => (this.universities = universityData));\n  }\n\n  getInstitutes(universityId: number): void {\n    this.thesisManagementSystemService\n      .getInstituteListForUniversity(universityId)\n      .subscribe((instituteData) => (this.institutes = instituteData));\n  }\n\n  get registerFormControl() {\n    return this.thesisForm.controls;\n  }\n\n  save(): void {\n    this.submitted = true;\n    if (!this.thesisForm.valid) {\n      return;\n    }\n\n    if (this.thesisId > 0) {\n      this.updateThesis();\n    } else {\n      this.addThesis();\n    }\n  }\n\n  cancel(): void {\n    this.navigateToFetchThesis();\n  }\n\n  private addThesis(): void {\n    \n    this.thesisManagementSystemService.saveThesis(this.thesisForm.value).subscribe(\n      () => {\n        this.navigateToFetchThesis();\n      },\n      (error) => console.error(error)\n    );\n    \n  }\n\n  private updateThesis(): void {\n    this.thesisManagementSystemService.updateThesis(this.thesisForm.value).subscribe(\n      () => {\n        this.navigateToFetchThesis();\n      },\n      (error) => console.error(error)\n    );\n  }\n\n  private navigateToFetchThesis() {\n    this.router.navigate(['/fetch-thesis']);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}