{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/thesisManagementSystem.service\";\nimport * as i4 from \"@angular/common\";\nfunction AddInstituteComponent_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 9);\n    i0.ɵɵtext(1, \" Institute Name is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class AddInstituteComponent {\n  constructor(fb, avRoute, thesisManagementSystemService, router) {\n    this.fb = fb;\n    this.avRoute = avRoute;\n    this.thesisManagementSystemService = thesisManagementSystemService;\n    this.router = router;\n    this.title = 'Create';\n    this.instituteId = 0;\n    this.submitted = false;\n    this.instituteForm = this.fb.group({\n      instituteId: 0,\n      instituteName: ['', [Validators.required]]\n    });\n  }\n  ngOnInit() {\n    this.avRoute.paramMap.subscribe(params => {\n      this.instituteId = params.get('id');\n    });\n    if (this.instituteId > 0) {\n      this.title = 'Edit';\n      this.thesisManagementSystemService.getInstituteData(this.instituteId).subscribe(response => {\n        this.instituteForm.setValue({\n          instituteId: response.instituteId,\n          instituteName: response.instituteName\n        });\n      }, error => console.error(error));\n    }\n  }\n  get registerFormControl() {\n    return this.instituteForm.controls;\n  }\n  save() {\n    this.submitted = true;\n    if (!this.instituteForm.valid) {\n      return;\n    }\n    if (this.instituteId > 0) {\n      this.updateInstitute();\n    } else {\n      this.addInstitute();\n    }\n  }\n  cancel() {\n    this.navigateToFetchInstitute();\n  }\n  addInstitute() {\n    this.thesisManagementSystemService.saveInstitute(this.instituteForm.value).subscribe(() => {\n      this.navigateToFetchInstitute();\n    }, error => console.error(error));\n  }\n  updateInstitute() {\n    this.thesisManagementSystemService.updateInstitute(this.instituteForm.value).subscribe(() => {\n      this.navigateToFetchInstitute();\n    }, error => console.error(error));\n  }\n  navigateToFetchInstitute() {\n    this.router.navigate(['/fetch-institute']);\n  }\n}\nAddInstituteComponent.ɵfac = function AddInstituteComponent_Factory(t) {\n  return new (t || AddInstituteComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.ThesisManagementSystemService), i0.ɵɵdirectiveInject(i2.Router));\n};\nAddInstituteComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AddInstituteComponent,\n  selectors: [[\"app-add-institute\"]],\n  decls: 19,\n  vars: 3,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\", \"row\"], [1, \"control-label\", \"col-md-12\"], [1, \"col-md-4\"], [\"formControlName\", \"instituteName\", 2, \"width\", \"415px\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [1, \"form-group\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [1, \"btn\", \"btn-danger\", 3, \"click\"], [1, \"text-danger\"]],\n  template: function AddInstituteComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"h3\");\n      i0.ɵɵtext(3, \"Institute\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"hr\");\n      i0.ɵɵelementStart(5, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function AddInstituteComponent_Template_form_ngSubmit_5_listener() {\n        return ctx.save();\n      });\n      i0.ɵɵelementStart(6, \"div\", 1)(7, \"label\", 2);\n      i0.ɵɵtext(8, \"Institute Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"div\", 3);\n      i0.ɵɵelement(10, \"input\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(11, AddInstituteComponent_span_11_Template, 2, 0, \"span\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"br\");\n      i0.ɵɵelementStart(13, \"div\", 6)(14, \"button\", 7);\n      i0.ɵɵtext(15, \"Save\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(16, \" \\u00A0 \");\n      i0.ɵɵelementStart(17, \"button\", 8);\n      i0.ɵɵlistener(\"click\", function AddInstituteComponent_Template_button_click_17_listener() {\n        return ctx.cancel();\n      });\n      i0.ɵɵtext(18, \"Cancel\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(ctx.title);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formGroup\", ctx.instituteForm);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", (ctx.registerFormControl.instituteName.touched || ctx.submitted) && (ctx.registerFormControl.instituteName.errors == null ? null : ctx.registerFormControl.instituteName.errors.required));\n    }\n  },\n  dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","AddInstituteComponent","constructor","fb","avRoute","thesisManagementSystemService","router","instituteForm","group","instituteId","instituteName","required","ngOnInit","paramMap","subscribe","params","get","title","getInstituteData","response","setValue","error","console","registerFormControl","controls","save","submitted","valid","updateInstitute","addInstitute","cancel","navigateToFetchInstitute","saveInstitute","value","navigate","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/nisadiker/Projects/ThesisManagementSystem/ThesisManagementSystem/ClientApp/src/app/add-institute/add-institute.component.ts","/Users/nisadiker/Projects/ThesisManagementSystem/ThesisManagementSystem/ClientApp/src/app/add-institute/add-institute.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { Institute } from '../models/institute';\nimport { ThesisManagementSystemService } from '../services/thesisManagementSystem.service';\n\n\n@Component({\n  selector: 'app-add-institute',\n  templateUrl: './add-institute.component.html',\n  styleUrls: ['./add-institute.component.scss'],\n})\nexport class AddInstituteComponent implements OnInit {\n  instituteForm: FormGroup;\n  title = 'Create';\n  instituteId: number = 0;\n  errorMessage: any;\n  submitted = false;\n\n\n  constructor(\n    private fb: FormBuilder,\n    private avRoute: ActivatedRoute,\n    private thesisManagementSystemService: ThesisManagementSystemService,\n    private router: Router\n  ) {\n\n    this.instituteForm = this.fb.group({\n      instituteId: 0,\n      instituteName: ['', [Validators.required]],\n      \n    });\n  }\n\n  ngOnInit(): void {\n    this.avRoute.paramMap.subscribe((params: Params) => {\n      this.instituteId = params.get('id');\n    });\n\n    if (this.instituteId > 0) {\n      this.title = 'Edit';\n\n      this.thesisManagementSystemService.getInstituteData(this.instituteId).subscribe(\n        (response: Institute) => {\n          this.instituteForm.setValue(\n            {\n              instituteId: response.instituteId,\n              instituteName: response.instituteName\n            });\n        },\n        (error) => console.error(error)\n      );\n      \n    }\n  }\n\n  get registerFormControl() {\n    return this.instituteForm.controls;\n  }\n\n  save(): void {\n    this.submitted = true;\n    if (!this.instituteForm.valid) {\n      return;\n    }\n\n    if (this.instituteId > 0) {\n      this.updateInstitute();\n    } else {\n      this.addInstitute();\n    }\n  }\n\n  cancel(): void {\n    this.navigateToFetchInstitute();\n  }\n\n  private addInstitute(): void {\n    \n    this.thesisManagementSystemService.saveInstitute(this.instituteForm.value).subscribe(\n      () => {\n        this.navigateToFetchInstitute();\n      },\n      (error) => console.error(error)\n    );\n    \n  }\n\n  private updateInstitute(): void {\n    this.thesisManagementSystemService.updateInstitute(this.instituteForm.value).subscribe(\n      () => {\n        this.navigateToFetchInstitute();\n      },\n      (error) => console.error(error)\n    );\n  }\n\n  private navigateToFetchInstitute() {\n    this.router.navigate(['/fetch-institute']);\n  }\n}\n","<h1>{{ title }}</h1>\n<h3>Institute</h3>\n<hr />\n\n<form [formGroup]=\"instituteForm\" (ngSubmit)=\"save()\">\n    \n\n    <div class=\"form-group row\">\n        <label class=\"control-label col-md-12\">Institute Name</label>\n        <div class=\"col-md-4\">\n            <input formControlName=\"instituteName\" style=\"width:415px\"/>\n        </div>\n        <span class=\"text-danger\" *ngIf=\"\n        (registerFormControl.instituteName.touched || submitted) &&\n        registerFormControl.instituteName.errors?.required\n      \">\n            Institute Name is required.\n        </span>\n    </div>\n\n\n    <br />\n    <div class=\"form-group\">\n        <button type=\"submit\" class=\"btn btn-primary\">Save</button>\n        &nbsp;\n        <button class=\"btn btn-danger\" (click)=\"cancel()\">Cancel</button>\n    </div>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}