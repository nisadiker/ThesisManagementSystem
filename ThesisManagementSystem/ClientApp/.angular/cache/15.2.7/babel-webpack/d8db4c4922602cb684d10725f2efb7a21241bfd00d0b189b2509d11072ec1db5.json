{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/thesisManagementSystem.service\";\nimport * as i4 from \"@angular/common\";\nfunction AddThesisComponent_option_13_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const university_r3 = ctx.$implicit;\n    i0.ɵɵpropertyInterpolate(\"value\", university_r3.universityId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(university_r3.universityName);\n  }\n}\nfunction AddThesisComponent_span_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 14);\n    i0.ɵɵtext(1, \" University is required \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction AddThesisComponent_span_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 14);\n    i0.ɵɵtext(1, \" Thesis Name is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class AddThesisComponent {\n  constructor(fb, avRoute, thesisManagementSystemService, router) {\n    this.fb = fb;\n    this.avRoute = avRoute;\n    this.thesisManagementSystemService = thesisManagementSystemService;\n    this.router = router;\n    this.universities = [];\n    this.title = 'Create';\n    this.thesisId = 0;\n    this.submitted = false;\n    this.thesisForm = this.fb.group({\n      thesisId: 0,\n      thesisName: ['', [Validators.required]],\n      universityId: 0\n    });\n  }\n  ngOnInit() {\n    this.getUniversities();\n    this.avRoute.paramMap.subscribe(params => {\n      this.thesisId = params.get('id');\n    });\n    if (this.thesisId > 0) {\n      this.title = 'Edit';\n      this.thesisManagementSystemService.getThesisData(this.thesisId).subscribe(response => {\n        this.thesisForm.setValue({\n          thesisId: response.thesisId,\n          thesisName: response.thesisName,\n          universityId: response.universityId\n        });\n      }, error => console.error(error));\n    }\n  }\n  getUniversities() {\n    this.thesisManagementSystemService.getUniversityList().subscribe(universityData => this.universities = universityData);\n  }\n  get registerFormControl() {\n    return this.thesisForm.controls;\n  }\n  save() {\n    this.submitted = true;\n    if (!this.thesisForm.valid) {\n      return;\n    }\n    if (this.thesisId > 0) {\n      this.updateThesis();\n    } else {\n      this.addThesis();\n    }\n  }\n  cancel() {\n    this.navigateToFetchThesis();\n  }\n  addThesis() {\n    this.thesisManagementSystemService.saveThesis(this.thesisForm.value).subscribe(() => {\n      this.navigateToFetchThesis();\n    }, error => console.error(error));\n  }\n  updateThesis() {\n    this.thesisManagementSystemService.updateThesis(this.thesisForm.value).subscribe(() => {\n      this.navigateToFetchThesis();\n    }, error => console.error(error));\n  }\n  navigateToFetchThesis() {\n    this.router.navigate(['/fetch-thesis']);\n  }\n}\nAddThesisComponent.ɵfac = function AddThesisComponent_Factory(t) {\n  return new (t || AddThesisComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.ThesisManagementSystemService), i0.ɵɵdirectiveInject(i2.Router));\n};\nAddThesisComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AddThesisComponent,\n  selectors: [[\"app-add-thesis\"]],\n  decls: 28,\n  vars: 5,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\", \"row\"], [\"for\", \"universityId\", 1, \"control-label\", \"col-md-12\"], [1, \"col-md-4\"], [\"data-val\", \"true\", \"formControlName\", \"universityId\", 1, \"form-control\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [1, \"control-label\", \"col-md-12\"], [\"formControlName\", \"thesisName\", 2, \"width\", \"415px\"], [1, \"form-group\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [1, \"btn\", \"btn-danger\", 3, \"click\"], [3, \"value\"], [1, \"text-danger\"]],\n  template: function AddThesisComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"h3\");\n      i0.ɵɵtext(3, \"Thesis\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"hr\");\n      i0.ɵɵelementStart(5, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function AddThesisComponent_Template_form_ngSubmit_5_listener() {\n        return ctx.save();\n      });\n      i0.ɵɵelementStart(6, \"div\", 1)(7, \"label\", 2);\n      i0.ɵɵtext(8, \"University\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"div\", 3)(10, \"select\", 4)(11, \"option\", 5);\n      i0.ɵɵtext(12, \"-- Select University --\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(13, AddThesisComponent_option_13_Template, 2, 2, \"option\", 6);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(14, AddThesisComponent_span_14_Template, 2, 0, \"span\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"div\", 1)(16, \"label\", 8);\n      i0.ɵɵtext(17, \"Thesis Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"div\", 3);\n      i0.ɵɵelement(19, \"input\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(20, AddThesisComponent_span_20_Template, 2, 0, \"span\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(21, \"br\");\n      i0.ɵɵelementStart(22, \"div\", 10)(23, \"button\", 11);\n      i0.ɵɵtext(24, \"Save\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(25, \" \\u00A0 \");\n      i0.ɵɵelementStart(26, \"button\", 12);\n      i0.ɵɵlistener(\"click\", function AddThesisComponent_Template_button_click_26_listener() {\n        return ctx.cancel();\n      });\n      i0.ɵɵtext(27, \"Cancel\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(ctx.title);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formGroup\", ctx.thesisForm);\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"ngForOf\", ctx.universities);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", (ctx.registerFormControl.universityId.touched || ctx.submitted) && (ctx.registerFormControl.universityId.errors == null ? null : ctx.registerFormControl.universityId.errors.required));\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", (ctx.registerFormControl.thesisName.touched || ctx.submitted) && (ctx.registerFormControl.thesisName.errors == null ? null : ctx.registerFormControl.thesisName.errors.required));\n    }\n  },\n  dependencies: [i4.NgForOf, i4.NgIf, i1.ɵNgNoValidate, i1.NgSelectOption, i1.ɵNgSelectMultipleOption, i1.DefaultValueAccessor, i1.SelectControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","AddThesisComponent","constructor","fb","avRoute","thesisManagementSystemService","router","thesisForm","group","thesisId","thesisName","required","universityId","ngOnInit","getUniversities","paramMap","subscribe","params","get","title","getThesisData","response","setValue","error","console","getUniversityList","universityData","universities","registerFormControl","controls","save","submitted","valid","updateThesis","addThesis","cancel","navigateToFetchThesis","saveThesis","value","navigate","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/nisadiker/Projects/ThesisManagementSystem/ThesisManagementSystem/ClientApp/src/app/add-thesis/add-thesis.component.ts","/Users/nisadiker/Projects/ThesisManagementSystem/ThesisManagementSystem/ClientApp/src/app/add-thesis/add-thesis.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { Thesis } from '../models/thesis';\nimport { University } from '../models/university';\nimport { ThesisManagementSystemService } from '../services/thesisManagementSystem.service';\n\n\n@Component({\n  selector: 'app-add-thesis',\n  templateUrl: './add-thesis.component.html',\n  styleUrls: ['./add-thesis.component.scss'],\n})\nexport class AddThesisComponent implements OnInit {\n  public universities: University[] = [];\n  thesisForm: FormGroup;\n  title = 'Create';\n  thesisId: number = 0;\n  errorMessage: any;\n  submitted = false;\n\n\n\n  constructor(\n    private fb: FormBuilder,\n    private avRoute: ActivatedRoute,\n    private thesisManagementSystemService: ThesisManagementSystemService,\n    private router: Router\n  ) {\n\n    this.thesisForm = this.fb.group({\n      thesisId: 0,\n      thesisName: ['', [Validators.required]],\n      universityId:0,\n      \n    });\n  }\n\n\n\n  ngOnInit(): void {\n    this.getUniversities();\n\n    this.avRoute.paramMap.subscribe((params: Params) => {\n      this.thesisId = params.get('id');\n    });\n\n    if (this.thesisId > 0) {\n      this.title = 'Edit';\n\n      this.thesisManagementSystemService.getThesisData(this.thesisId).subscribe(\n        (response: Thesis) => {\n          this.thesisForm.setValue(\n            {\n              thesisId: response.thesisId,\n              thesisName: response.thesisName,\n              universityId: response.universityId\n            });\n        },\n        (error) => console.error(error)\n      );\n      \n    }\n  }\n\n  getUniversities(): void {\n    this.thesisManagementSystemService\n      .getUniversityList()\n      .subscribe((universityData) => (this.universities = universityData));\n  }\n\n  get registerFormControl() {\n    return this.thesisForm.controls;\n  }\n\n  save(): void {\n    this.submitted = true;\n    if (!this.thesisForm.valid) {\n      return;\n    }\n\n    if (this.thesisId > 0) {\n      this.updateThesis();\n    } else {\n      this.addThesis();\n    }\n  }\n\n  cancel(): void {\n    this.navigateToFetchThesis();\n  }\n\n  private addThesis(): void {\n    \n    this.thesisManagementSystemService.saveThesis(this.thesisForm.value).subscribe(\n      () => {\n        this.navigateToFetchThesis();\n      },\n      (error) => console.error(error)\n    );\n    \n  }\n\n  private updateThesis(): void {\n    this.thesisManagementSystemService.updateThesis(this.thesisForm.value).subscribe(\n      () => {\n        this.navigateToFetchThesis();\n      },\n      (error) => console.error(error)\n    );\n  }\n\n  private navigateToFetchThesis() {\n    this.router.navigate(['/fetch-thesis']);\n  }\n}\n","<h1>{{ title }}</h1>\n<h3>Thesis</h3>\n<hr />\n\n<form [formGroup]=\"thesisForm\" (ngSubmit)=\"save()\">\n\n    <div class=\"form-group row\">\n        <label class=\"control-label col-md-12\" for=\"universityId\">University</label>\n        <div class=\"col-md-4\">\n            <select class=\"form-control\" data-val=\"true\" formControlName=\"universityId\">\n                <option value=\"\">-- Select University --</option>\n                <option *ngFor=\"let university of universities\" value=\"{{ university.universityId }}\">{{ university.universityName }}</option>\n            </select>\n        </div>\n        <span class=\"text-danger\" *ngIf=\"\n        (registerFormControl.universityId.touched || submitted) &&\n        registerFormControl.universityId.errors?.required\n      \">\n            University is required\n        </span>\n    </div>\n\n    <div class=\"form-group row\">\n        <label class=\"control-label col-md-12\">Thesis Name</label>\n        <div class=\"col-md-4\">\n            <input formControlName=\"thesisName\" style=\"width:415px\" />\n        </div>\n        <span class=\"text-danger\" *ngIf=\"\n        (registerFormControl.thesisName.touched || submitted) &&\n        registerFormControl.thesisName.errors?.required\n      \">\n            Thesis Name is required.\n        </span>\n    </div>\n\n\n    <br />\n    <div class=\"form-group\">\n        <button type=\"submit\" class=\"btn btn-primary\">Save</button>\n        &nbsp;\n        <button class=\"btn btn-danger\" (click)=\"cancel()\">Cancel</button>\n    </div>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}