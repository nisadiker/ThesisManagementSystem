{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/thesisManagementSystem.service\";\nimport * as i4 from \"@angular/common\";\nfunction AddThesisSubjectComponent_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 9);\n    i0.ɵɵtext(1, \" Subject is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class AddThesisSubjectComponent {\n  constructor(fb, avRoute, thesisManagementSystemService, router) {\n    this.fb = fb;\n    this.avRoute = avRoute;\n    this.thesisManagementSystemService = thesisManagementSystemService;\n    this.router = router;\n    this.title = 'Create';\n    this.subjectId = 0;\n    this.thesisId = 0;\n    this.submitted = false;\n    this.avRoute.paramMap.subscribe(params => {\n      this.subjectId = params.get('id');\n      this.thesisId = params.get('thesisId');\n    });\n    this.thesisSubjectForm = this.fb.group({\n      subjectId: 0,\n      subject: ['', [Validators.required]],\n      thesisId: this.thesisId\n    });\n  }\n  ngOnInit() {\n    if (this.subjectId > 0) {\n      this.title = 'Edit';\n      this.thesisManagementSystemService.getThesisSubjectData(this.subjectId).subscribe(response => {\n        this.thesisSubjectForm.setValue({\n          subjectId: response.subjectId,\n          subject: response.subject,\n          thesisId: response.thesisId\n        });\n      }, error => console.error(error));\n    }\n  }\n  get registerFormControl() {\n    return this.thesisSubjectForm.controls;\n  }\n  save() {\n    this.submitted = true;\n    if (!this.thesisSubjectForm.valid) {\n      return;\n    }\n    if (this.subjectId > 0) {\n      this.updateThesisSubject();\n    } else {\n      this.addThesisSubject();\n    }\n  }\n  cancel() {\n    this.navigateToFetchThesisSubject();\n  }\n  addThesisSubject() {\n    this.thesisManagementSystemService.saveThesisSubject(this.thesisSubjectForm.value).subscribe(() => {\n      this.navigateToFetchThesisSubject();\n    }, error => console.error(error));\n  }\n  updateThesisSubject() {\n    this.thesisManagementSystemService.updateThesisSubject(this.thesisSubjectForm.value).subscribe(() => {\n      this.navigateToFetchThesisSubject();\n    }, error => console.error(error));\n  }\n  navigateToFetchThesisSubject() {\n    this.router.navigate(['/fetch-thesisSubject', this.thesisId]);\n  }\n}\nAddThesisSubjectComponent.ɵfac = function AddThesisSubjectComponent_Factory(t) {\n  return new (t || AddThesisSubjectComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.ThesisManagementSystemService), i0.ɵɵdirectiveInject(i2.Router));\n};\nAddThesisSubjectComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AddThesisSubjectComponent,\n  selectors: [[\"app-add-thesisSubject\"]],\n  decls: 19,\n  vars: 3,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\", \"row\"], [1, \"control-label\", \"col-md-12\"], [1, \"col-md-4\"], [\"formControlName\", \"subject\", 2, \"width\", \"415px\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [1, \"form-group\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [1, \"btn\", \"btn-danger\", 3, \"click\"], [1, \"text-danger\"]],\n  template: function AddThesisSubjectComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"h3\");\n      i0.ɵɵtext(3, \"Thesis Subject\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"hr\");\n      i0.ɵɵelementStart(5, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function AddThesisSubjectComponent_Template_form_ngSubmit_5_listener() {\n        return ctx.save();\n      });\n      i0.ɵɵelementStart(6, \"div\", 1)(7, \"label\", 2);\n      i0.ɵɵtext(8, \"Subject\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"div\", 3);\n      i0.ɵɵelement(10, \"input\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(11, AddThesisSubjectComponent_span_11_Template, 2, 0, \"span\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"br\");\n      i0.ɵɵelementStart(13, \"div\", 6)(14, \"button\", 7);\n      i0.ɵɵtext(15, \"Save\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(16, \" \\u00A0 \");\n      i0.ɵɵelementStart(17, \"button\", 8);\n      i0.ɵɵlistener(\"click\", function AddThesisSubjectComponent_Template_button_click_17_listener() {\n        return ctx.cancel();\n      });\n      i0.ɵɵtext(18, \"Cancel\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(ctx.title);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formGroup\", ctx.thesisSubjectForm);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", (ctx.registerFormControl.subject.touched || ctx.submitted) && (ctx.registerFormControl.subject.errors == null ? null : ctx.registerFormControl.subject.errors.required));\n    }\n  },\n  dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAsBA,UAAU,QAAmB,gBAAgB;;;;;;;;ICW3DC,+BAGA;IACIA,sCACJ;IAAAA,iBAAO;;;ADHf,OAAM,MAAOC,yBAAyB;EASpCC,YACUC,EAAe,EACfC,OAAuB,EACvBC,6BAA4D,EAC5DC,MAAc;IAHd,OAAE,GAAFH,EAAE;IACF,YAAO,GAAPC,OAAO;IACP,kCAA6B,GAA7BC,6BAA6B;IAC7B,WAAM,GAANC,MAAM;IAXhB,UAAK,GAAG,QAAQ;IAChB,cAAS,GAAW,CAAC;IACrB,aAAQ,GAAW,CAAC;IAEpB,cAAS,GAAG,KAAK;IAUf,IAAI,CAACF,OAAO,CAACG,QAAQ,CAACC,SAAS,CAAEC,MAAc,IAAI;MACjD,IAAI,CAACC,SAAS,GAAGD,MAAM,CAACE,GAAG,CAAC,IAAI,CAAC;MACjC,IAAI,CAACC,QAAQ,GAAGH,MAAM,CAACE,GAAG,CAAC,UAAU,CAAC;IACxC,CAAC,CAAC;IAEF,IAAI,CAACE,iBAAiB,GAAG,IAAI,CAACV,EAAE,CAACW,KAAK,CAAC;MACrCJ,SAAS,EAAE,CAAC;MACZK,OAAO,EAAE,CAAC,EAAE,EAAE,CAAChB,UAAU,CAACiB,QAAQ,CAAC,CAAC;MACpCJ,QAAQ,EAAE,IAAI,CAACA;KAChB,CAAC;EACJ;EAEAK,QAAQ;IAGN,IAAI,IAAI,CAACP,SAAS,GAAG,CAAC,EAAE;MACtB,IAAI,CAACQ,KAAK,GAAG,MAAM;MAEnB,IAAI,CAACb,6BAA6B,CAACc,oBAAoB,CAAC,IAAI,CAACT,SAAS,CAAC,CAACF,SAAS,CAC9EY,QAAuB,IAAI;QAC1B,IAAI,CAACP,iBAAiB,CAACQ,QAAQ,CAC7B;UACEX,SAAS,EAAEU,QAAQ,CAACV,SAAS;UAC7BK,OAAO,EAAEK,QAAQ,CAACL,OAAO;UACzBH,QAAQ,EAAEQ,QAAQ,CAACR;SACpB,CAAC;MACN,CAAC,EACAU,KAAK,IAAKC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAChC;;EAGL;EAEA,IAAIE,mBAAmB;IACrB,OAAO,IAAI,CAACX,iBAAiB,CAACY,QAAQ;EACxC;EAEAC,IAAI;IACF,IAAI,CAACC,SAAS,GAAG,IAAI;IACrB,IAAI,CAAC,IAAI,CAACd,iBAAiB,CAACe,KAAK,EAAE;MACjC;;IAGF,IAAI,IAAI,CAAClB,SAAS,GAAG,CAAC,EAAE;MACtB,IAAI,CAACmB,mBAAmB,EAAE;KAC3B,MAAM;MACL,IAAI,CAACC,gBAAgB,EAAE;;EAE3B;EAEAC,MAAM;IACJ,IAAI,CAACC,4BAA4B,EAAE;EACrC;EAEQF,gBAAgB;IAEtB,IAAI,CAACzB,6BAA6B,CAAC4B,iBAAiB,CAAC,IAAI,CAACpB,iBAAiB,CAACqB,KAAK,CAAC,CAAC1B,SAAS,CAC1F,MAAK;MACH,IAAI,CAACwB,4BAA4B,EAAE;IACrC,CAAC,EACAV,KAAK,IAAKC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAChC;EAEH;EAEQO,mBAAmB;IACzB,IAAI,CAACxB,6BAA6B,CAACwB,mBAAmB,CAAC,IAAI,CAAChB,iBAAiB,CAACqB,KAAK,CAAC,CAAC1B,SAAS,CAC5F,MAAK;MACH,IAAI,CAACwB,4BAA4B,EAAE;IACrC,CAAC,EACAV,KAAK,IAAKC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAChC;EACH;EAEQU,4BAA4B;IAClC,IAAI,CAAC1B,MAAM,CAAC6B,QAAQ,CAAC,CAAC,sBAAsB,EAAE,IAAI,CAACvB,QAAQ,CAAC,CAAC;EAC/D;;AA5FWX,yBAAyB;mBAAzBA,yBAAyB;AAAA;AAAzBA,yBAAyB;QAAzBA,yBAAyB;EAAAmC;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCdtCxC,0BAAI;MAAAA,YAAW;MAAAA,iBAAK;MACpBA,0BAAI;MAAAA,8BAAc;MAAAA,iBAAK;MACvBA,qBAAM;MAENA,+BAA0D;MAApBA;QAAA,OAAYyC,UAAM;MAAA,EAAC;MAGrDzC,8BAA4B;MACeA,uBAAO;MAAAA,iBAAQ;MACtDA,8BAAsB;MAClBA,4BAAsD;MAC1DA,iBAAM;MACNA,8EAKO;MACXA,iBAAM;MAGNA,sBAAM;MACNA,+BAAwB;MAC0BA,qBAAI;MAAAA,iBAAS;MAC3DA,yBACA;MAAAA,kCAAkD;MAAnBA;QAAA,OAASyC,YAAQ;MAAA,EAAC;MAACzC,uBAAM;MAAAA,iBAAS;;;MAzBrEA,eAAW;MAAXA,+BAAW;MAITA,eAA+B;MAA/BA,iDAA+B;MAQFA,eAG3B;MAH2BA,8LAG3B","names":["Validators","i0","AddThesisSubjectComponent","constructor","fb","avRoute","thesisManagementSystemService","router","paramMap","subscribe","params","subjectId","get","thesisId","thesisSubjectForm","group","subject","required","ngOnInit","title","getThesisSubjectData","response","setValue","error","console","registerFormControl","controls","save","submitted","valid","updateThesisSubject","addThesisSubject","cancel","navigateToFetchThesisSubject","saveThesisSubject","value","navigate","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/nisadiker/Projects/ThesisManagementSystem/ThesisManagementSystem/ClientApp/src/app/add-thesisSubject/add-thesisSubject.component.ts","/Users/nisadiker/Projects/ThesisManagementSystem/ThesisManagementSystem/ClientApp/src/app/add-thesisSubject/add-thesisSubject.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { ThesisSubject } from '../models/thesisSubject';\nimport { ThesisManagementSystemService } from '../services/thesisManagementSystem.service';\n\n\n@Component({\n  selector: 'app-add-thesisSubject',\n  templateUrl: './add-thesisSubject.component.html',\n  styleUrls: ['./add-thesisSubject.component.scss'],\n})\nexport class AddThesisSubjectComponent implements OnInit {\n  thesisSubjectForm: FormGroup;\n  title = 'Create';\n  subjectId: number = 0;\n  thesisId: number = 0;\n  errorMessage: any;\n  submitted = false;\n\n\n  constructor(\n    private fb: FormBuilder,\n    private avRoute: ActivatedRoute,\n    private thesisManagementSystemService: ThesisManagementSystemService,\n    private router: Router\n  ) {\n\n    this.avRoute.paramMap.subscribe((params: Params) => {\n      this.subjectId = params.get('id');\n      this.thesisId = params.get('thesisId');\n    });\n\n    this.thesisSubjectForm = this.fb.group({\n      subjectId: 0,\n      subject: ['', [Validators.required]],\n      thesisId: this.thesisId\n    });\n  }\n\n  ngOnInit(): void {\n\n\n    if (this.subjectId > 0) {\n      this.title = 'Edit';\n\n      this.thesisManagementSystemService.getThesisSubjectData(this.subjectId).subscribe(\n        (response: ThesisSubject) => {\n          this.thesisSubjectForm.setValue(\n            {\n              subjectId: response.subjectId,\n              subject: response.subject,\n              thesisId: response.thesisId\n            });\n        },\n        (error) => console.error(error)\n      );\n      \n    }\n  }\n\n  get registerFormControl() {\n    return this.thesisSubjectForm.controls;\n  }\n\n  save(): void {\n    this.submitted = true;\n    if (!this.thesisSubjectForm.valid) {\n      return;\n    }\n\n    if (this.subjectId > 0) {\n      this.updateThesisSubject();\n    } else {\n      this.addThesisSubject();\n    }\n  }\n\n  cancel(): void {\n    this.navigateToFetchThesisSubject();\n  }\n\n  private addThesisSubject(): void {\n    \n    this.thesisManagementSystemService.saveThesisSubject(this.thesisSubjectForm.value).subscribe(\n      () => {\n        this.navigateToFetchThesisSubject();\n      },\n      (error) => console.error(error)\n    );\n    \n  }\n\n  private updateThesisSubject(): void {\n    this.thesisManagementSystemService.updateThesisSubject(this.thesisSubjectForm.value).subscribe(\n      () => {\n        this.navigateToFetchThesisSubject();\n      },\n      (error) => console.error(error)\n    );\n  }\n\n  private navigateToFetchThesisSubject() {\n    this.router.navigate(['/fetch-thesisSubject', this.thesisId]);\n  }\n}\n","<h1>{{ title }}</h1>\n<h3>Thesis Subject</h3>\n<hr />\n\n<form [formGroup]=\"thesisSubjectForm\" (ngSubmit)=\"save()\">\n    \n\n    <div class=\"form-group row\">\n        <label class=\"control-label col-md-12\">Subject</label>\n        <div class=\"col-md-4\">\n            <input formControlName=\"subject\" style=\"width:415px\"/>\n        </div>\n        <span class=\"text-danger\" *ngIf=\"\n        (registerFormControl.subject.touched || submitted) &&\n        registerFormControl.subject.errors?.required\n      \">\n            Subject is required.\n        </span>\n    </div>\n\n\n    <br />\n    <div class=\"form-group\">\n        <button type=\"submit\" class=\"btn btn-primary\">Save</button>\n        &nbsp;\n        <button class=\"btn btn-danger\" (click)=\"cancel()\">Cancel</button>\n    </div>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}