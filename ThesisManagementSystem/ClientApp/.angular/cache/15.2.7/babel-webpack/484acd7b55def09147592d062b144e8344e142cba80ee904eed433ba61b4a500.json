{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet AddUniversityComponent = class AddUniversityComponent {\n  constructor(fb, avRoute, thesisManagementSystemService, router) {\n    this.fb = fb;\n    this.avRoute = avRoute;\n    this.thesisManagementSystemService = thesisManagementSystemService;\n    this.router = router;\n    this.title = 'Create';\n    this.universityId = 0;\n    this.submitted = false;\n    this.universityForm = this.fb.group({\n      universityId: 0,\n      universityName: ['', [Validators.required]]\n    });\n  }\n  ngOnInit() {\n    this.avRoute.paramMap.subscribe(params => {\n      this.universityId = params.get('id');\n    });\n    if (this.universityId > 0) {\n      this.title = 'Edit';\n      this.thesisManagementSystemService.getUniversityData(this.universityId).subscribe(response => {\n        this.universityForm.setValue({\n          universityId: response.universityId,\n          universityName: response.universityName\n        });\n      }, error => console.error(error));\n    }\n  }\n  get registerFormControl() {\n    return this.universityForm.controls;\n  }\n  save() {\n    this.submitted = true;\n    if (!this.universityForm.valid) {\n      return;\n    }\n    if (this.universityId > 0) {\n      this.updateUniversity();\n    } else {\n      this.addUniversity();\n    }\n  }\n  cancel() {\n    this.navigateToFetchUniversity();\n  }\n  addUniversity() {\n    this.thesisManagementSystemService.saveUniversity(this.universityForm.value).subscribe(() => {\n      this.navigateToFetchUniversity();\n    }, error => console.error(error));\n  }\n  updateUniversity() {\n    this.thesisManagementSystemService.updateUniversity(this.universityForm.value).subscribe(() => {\n      this.navigateToFetchUniversity();\n    }, error => console.error(error));\n  }\n  navigateToFetchUniversity() {\n    this.router.navigate(['/fetch-university']);\n  }\n};\nAddUniversityComponent = __decorate([Component({\n  selector: 'app-add-university',\n  templateUrl: './add-university.component.html',\n  styleUrls: ['./add-university.component.scss']\n})], AddUniversityComponent);\nexport { AddUniversityComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAsBC,UAAU,QAAmB,gBAAgB;AAa5D,IAAMC,sBAAsB,GAA5B,MAAMA,sBAAsB;EAQjCC,YACUC,EAAe,EACfC,OAAuB,EACvBC,6BAA4D,EAC5DC,MAAc;IAHd,OAAE,GAAFH,EAAE;IACF,YAAO,GAAPC,OAAO;IACP,kCAA6B,GAA7BC,6BAA6B;IAC7B,WAAM,GAANC,MAAM;IAVhB,UAAK,GAAG,QAAQ;IAChB,iBAAY,GAAW,CAAC;IAExB,cAAS,GAAG,KAAK;IAUf,IAAI,CAACC,cAAc,GAAG,IAAI,CAACJ,EAAE,CAACK,KAAK,CAAC;MAClCC,YAAY,EAAE,CAAC;MACfC,cAAc,EAAE,CAAC,EAAE,EAAE,CAACV,UAAU,CAACW,QAAQ,CAAC;KAE3C,CAAC;EACJ;EAEAC,QAAQ;IACN,IAAI,CAACR,OAAO,CAACS,QAAQ,CAACC,SAAS,CAAEC,MAAc,IAAI;MACjD,IAAI,CAACN,YAAY,GAAGM,MAAM,CAACC,GAAG,CAAC,IAAI,CAAC;IACtC,CAAC,CAAC;IAEF,IAAI,IAAI,CAACP,YAAY,GAAG,CAAC,EAAE;MACzB,IAAI,CAACQ,KAAK,GAAG,MAAM;MAEnB,IAAI,CAACZ,6BAA6B,CAACa,iBAAiB,CAAC,IAAI,CAACT,YAAY,CAAC,CAACK,SAAS,CAC9EK,QAAoB,IAAI;QACvB,IAAI,CAACZ,cAAc,CAACa,QAAQ,CAC1B;UACEX,YAAY,EAAEU,QAAQ,CAACV,YAAY;UACnCC,cAAc,EAAES,QAAQ,CAACT;SAC1B,CAAC;MACN,CAAC,EACAW,KAAK,IAAKC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAChC;;EAGL;EAEA,IAAIE,mBAAmB;IACrB,OAAO,IAAI,CAAChB,cAAc,CAACiB,QAAQ;EACrC;EAEAC,IAAI;IACF,IAAI,CAACC,SAAS,GAAG,IAAI;IACrB,IAAI,CAAC,IAAI,CAACnB,cAAc,CAACoB,KAAK,EAAE;MAC9B;;IAGF,IAAI,IAAI,CAAClB,YAAY,GAAG,CAAC,EAAE;MACzB,IAAI,CAACmB,gBAAgB,EAAE;KACxB,MAAM;MACL,IAAI,CAACC,aAAa,EAAE;;EAExB;EAEAC,MAAM;IACJ,IAAI,CAACC,yBAAyB,EAAE;EAClC;EAEQF,aAAa;IAEnB,IAAI,CAACxB,6BAA6B,CAAC2B,cAAc,CAAC,IAAI,CAACzB,cAAc,CAAC0B,KAAK,CAAC,CAACnB,SAAS,CACpF,MAAK;MACH,IAAI,CAACiB,yBAAyB,EAAE;IAClC,CAAC,EACAV,KAAK,IAAKC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAChC;EAEH;EAEQO,gBAAgB;IACtB,IAAI,CAACvB,6BAA6B,CAACuB,gBAAgB,CAAC,IAAI,CAACrB,cAAc,CAAC0B,KAAK,CAAC,CAACnB,SAAS,CACtF,MAAK;MACH,IAAI,CAACiB,yBAAyB,EAAE;IAClC,CAAC,EACAV,KAAK,IAAKC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CAChC;EACH;EAEQU,yBAAyB;IAC/B,IAAI,CAACzB,MAAM,CAAC4B,QAAQ,CAAC,CAAC,mBAAmB,CAAC,CAAC;EAC7C;CACD;AAxFYjC,sBAAsB,eALlCF,SAAS,CAAC;EACToC,QAAQ,EAAE,oBAAoB;EAC9BC,WAAW,EAAE,iCAAiC;EAC9CC,SAAS,EAAE,CAAC,iCAAiC;CAC9C,CAAC,GACWpC,sBAAsB,CAwFlC;SAxFYA,sBAAsB","names":["Component","Validators","AddUniversityComponent","constructor","fb","avRoute","thesisManagementSystemService","router","universityForm","group","universityId","universityName","required","ngOnInit","paramMap","subscribe","params","get","title","getUniversityData","response","setValue","error","console","registerFormControl","controls","save","submitted","valid","updateUniversity","addUniversity","cancel","navigateToFetchUniversity","saveUniversity","value","navigate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/nisadiker/Projects/ThesisManagementSystem/ThesisManagementSystem/ClientApp/src/app/add-thesisKeyword/add-thesisKeyword.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { University } from '../models/university';\nimport { ThesisManagementSystemService } from '../services/thesisManagementSystem.service';\n\n\n@Component({\n  selector: 'app-add-university',\n  templateUrl: './add-university.component.html',\n  styleUrls: ['./add-university.component.scss'],\n})\nexport class AddUniversityComponent implements OnInit {\n  universityForm: FormGroup;\n  title = 'Create';\n  universityId: number = 0;\n  errorMessage: any;\n  submitted = false;\n\n\n  constructor(\n    private fb: FormBuilder,\n    private avRoute: ActivatedRoute,\n    private thesisManagementSystemService: ThesisManagementSystemService,\n    private router: Router\n  ) {\n\n    this.universityForm = this.fb.group({\n      universityId: 0,\n      universityName: ['', [Validators.required]],\n      \n    });\n  }\n\n  ngOnInit(): void {\n    this.avRoute.paramMap.subscribe((params: Params) => {\n      this.universityId = params.get('id');\n    });\n\n    if (this.universityId > 0) {\n      this.title = 'Edit';\n\n      this.thesisManagementSystemService.getUniversityData(this.universityId).subscribe(\n        (response: University) => {\n          this.universityForm.setValue(\n            {\n              universityId: response.universityId,\n              universityName: response.universityName\n            });\n        },\n        (error) => console.error(error)\n      );\n      \n    }\n  }\n\n  get registerFormControl() {\n    return this.universityForm.controls;\n  }\n\n  save(): void {\n    this.submitted = true;\n    if (!this.universityForm.valid) {\n      return;\n    }\n\n    if (this.universityId > 0) {\n      this.updateUniversity();\n    } else {\n      this.addUniversity();\n    }\n  }\n\n  cancel(): void {\n    this.navigateToFetchUniversity();\n  }\n\n  private addUniversity(): void {\n    \n    this.thesisManagementSystemService.saveUniversity(this.universityForm.value).subscribe(\n      () => {\n        this.navigateToFetchUniversity();\n      },\n      (error) => console.error(error)\n    );\n    \n  }\n\n  private updateUniversity(): void {\n    this.thesisManagementSystemService.updateUniversity(this.universityForm.value).subscribe(\n      () => {\n        this.navigateToFetchUniversity();\n      },\n      (error) => console.error(error)\n    );\n  }\n\n  private navigateToFetchUniversity() {\n    this.router.navigate(['/fetch-university']);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}