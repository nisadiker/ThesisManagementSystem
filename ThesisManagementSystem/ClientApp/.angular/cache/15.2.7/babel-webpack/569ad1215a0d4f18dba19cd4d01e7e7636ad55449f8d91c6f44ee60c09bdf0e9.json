{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../services/thesisManagementSystem.service\";\nimport * as i4 from \"@angular/common\";\nfunction AddUniversityComponent_span_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"span\", 9);\n    i0.ɵɵtext(1, \" University Name is required. \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class AddUniversityComponent {\n  constructor(fb, avRoute, thesisManagementSystemService, router) {\n    this.fb = fb;\n    this.avRoute = avRoute;\n    this.thesisManagementSystemService = thesisManagementSystemService;\n    this.router = router;\n    this.title = 'Create';\n    this.universityId = 0;\n    this.submitted = false;\n    this.universityForm = this.fb.group({\n      universityId: 0,\n      universityName: ['', [Validators.required]]\n    });\n  }\n  ngOnInit() {\n    this.avRoute.paramMap.subscribe(params => {\n      this.universityId = params.get('universityId');\n    });\n    this.route.paramMap.subscribe(paramMap => {\n      this.universityId = paramMap.get('id');\n    });\n    if (this.universityId > 0) {\n      this.title = 'Edit';\n      this.thesisManagementSystemService.getUniversityData(this.universityId).subscribe(response => {\n        this.universityForm.setValue({\n          universityId: response.universityId,\n          universityName: response.universityName\n        });\n      }, error => console.error(error));\n    }\n  }\n  get registerFormControl() {\n    return this.universityForm.controls;\n  }\n  save() {\n    this.submitted = true;\n    if (!this.universityForm.valid) {\n      return;\n    }\n    if (this.universityId > 0) {\n      this.updateUniversity();\n    } else {\n      this.addUniversity();\n    }\n  }\n  cancel() {\n    this.navigateToFetchUniversity();\n  }\n  addUniversity() {\n    this.thesisManagementSystemService.saveUniversity(this.universityForm.value).subscribe(() => {\n      this.navigateToFetchUniversity();\n    }, error => console.error(error));\n  }\n  updateUniversity() {\n    this.thesisManagementSystemService.updateUniversity(this.universityForm.value).subscribe(() => {\n      this.navigateToFetchUniversity();\n    }, error => console.error(error));\n  }\n  navigateToFetchUniversity() {\n    this.router.navigate(['']);\n  }\n}\nAddUniversityComponent.ɵfac = function AddUniversityComponent_Factory(t) {\n  return new (t || AddUniversityComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i3.ThesisManagementSystemService), i0.ɵɵdirectiveInject(i2.Router));\n};\nAddUniversityComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AddUniversityComponent,\n  selectors: [[\"app-add-university\"]],\n  decls: 19,\n  vars: 3,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [1, \"form-group\", \"row\"], [1, \"control-label\", \"col-md-12\"], [1, \"col-md-4\"], [\"formControlName\", \"universityName\", 2, \"width\", \"415px\"], [\"class\", \"text-danger\", 4, \"ngIf\"], [1, \"form-group\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [1, \"btn\", \"btn-danger\", 3, \"click\"], [1, \"text-danger\"]],\n  template: function AddUniversityComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"h3\");\n      i0.ɵɵtext(3, \"University\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"hr\");\n      i0.ɵɵelementStart(5, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function AddUniversityComponent_Template_form_ngSubmit_5_listener() {\n        return ctx.save();\n      });\n      i0.ɵɵelementStart(6, \"div\", 1)(7, \"label\", 2);\n      i0.ɵɵtext(8, \"University Name\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"div\", 3);\n      i0.ɵɵelement(10, \"input\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(11, AddUniversityComponent_span_11_Template, 2, 0, \"span\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"br\");\n      i0.ɵɵelementStart(13, \"div\", 6)(14, \"button\", 7);\n      i0.ɵɵtext(15, \"Save\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(16, \" \\u00A0 \");\n      i0.ɵɵelementStart(17, \"button\", 8);\n      i0.ɵɵlistener(\"click\", function AddUniversityComponent_Template_button_click_17_listener() {\n        return ctx.cancel();\n      });\n      i0.ɵɵtext(18, \"Cancel\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(ctx.title);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"formGroup\", ctx.universityForm);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngIf\", (ctx.registerFormControl.universityName.touched || ctx.submitted) && (ctx.registerFormControl.universityName.errors == null ? null : ctx.registerFormControl.universityName.errors.required));\n    }\n  },\n  dependencies: [i4.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","i0","AddUniversityComponent","constructor","fb","avRoute","thesisManagementSystemService","router","universityForm","group","universityId","universityName","required","ngOnInit","paramMap","subscribe","params","get","route","title","getUniversityData","response","setValue","error","console","registerFormControl","controls","save","submitted","valid","updateUniversity","addUniversity","cancel","navigateToFetchUniversity","saveUniversity","value","navigate","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/nisadiker/Projects/ThesisManagementSystem/ThesisManagementSystem/ClientApp/src/app/add-university/add-university.component.ts","/Users/nisadiker/Projects/ThesisManagementSystem/ThesisManagementSystem/ClientApp/src/app/add-university/add-university.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators, FormGroup } from '@angular/forms';\nimport { ActivatedRoute, Params, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { University } from '../models/university';\nimport { ThesisManagementSystemService } from '../services/thesisManagementSystem.service';\n\n\n@Component({\n  selector: 'app-add-university',\n  templateUrl: './add-university.component.html',\n  styleUrls: ['./add-university.component.scss'],\n})\nexport class AddUniversityComponent implements OnInit {\n  universityForm: FormGroup;\n  title = 'Create';\n  universityId: number = 0;\n  errorMessage: any;\n  submitted = false;\n\n\n  constructor(\n    private fb: FormBuilder,\n    private avRoute: ActivatedRoute,\n    private thesisManagementSystemService: ThesisManagementSystemService,\n    private router: Router\n  ) {\n\n    this.universityForm = this.fb.group({\n      universityId: 0,\n      universityName: ['', [Validators.required]],\n      \n    });\n  }\n\n  ngOnInit(): void {\n    this.avRoute.paramMap.subscribe((params: Params) => {\n      this.universityId = params.get('universityId');\n    });\n    this.route.paramMap.subscribe(paramMap => {\n      this.universityId = paramMap.get('id');\n    });\n\n    if (this.universityId > 0) {\n      this.title = 'Edit';\n\n      this.thesisManagementSystemService.getUniversityData(this.universityId).subscribe(\n        (response: University) => {\n          this.universityForm.setValue(\n            {\n              universityId: response.universityId,\n              universityName: response.universityName\n            });\n        },\n        (error) => console.error(error)\n      );\n      \n    }\n  }\n\n  get registerFormControl() {\n    return this.universityForm.controls;\n  }\n\n  save(): void {\n    this.submitted = true;\n    if (!this.universityForm.valid) {\n      return;\n    }\n\n    if (this.universityId > 0) {\n      this.updateUniversity();\n    } else {\n      this.addUniversity();\n    }\n  }\n\n  cancel(): void {\n    this.navigateToFetchUniversity();\n  }\n\n  private addUniversity(): void {\n    \n    this.thesisManagementSystemService.saveUniversity(this.universityForm.value).subscribe(\n      () => {\n        this.navigateToFetchUniversity();\n      },\n      (error) => console.error(error)\n    );\n    \n  }\n\n  private updateUniversity(): void {\n    this.thesisManagementSystemService.updateUniversity(this.universityForm.value).subscribe(\n      () => {\n        this.navigateToFetchUniversity();\n      },\n      (error) => console.error(error)\n    );\n  }\n\n  private navigateToFetchUniversity() {\n    this.router.navigate(['']);\n  }\n}\n","<h1>{{ title }}</h1>\n<h3>University</h3>\n<hr />\n\n<form [formGroup]=\"universityForm\" (ngSubmit)=\"save()\">\n    \n\n    <div class=\"form-group row\">\n        <label class=\"control-label col-md-12\">University Name</label>\n        <div class=\"col-md-4\">\n            <input formControlName=\"universityName\" style=\"width:415px\"/>\n        </div>\n        <span class=\"text-danger\" *ngIf=\"\n        (registerFormControl.universityName.touched || submitted) &&\n        registerFormControl.universityName.errors?.required\n      \">\n            University Name is required.\n        </span>\n    </div>\n\n\n    <br />\n    <div class=\"form-group\">\n        <button type=\"submit\" class=\"btn btn-primary\">Save</button>\n        &nbsp;\n        <button class=\"btn btn-danger\" (click)=\"cancel()\">Cancel</button>\n    </div>\n</form>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}